import string

class CodeGeneratorBackend:
	def begin(self, tab="\t"):
		self.code = []
		self.tab = tab
		self.level = 0
	def end(self):
		return string.join(self.code, "")
	def writeln(self, string):
		return self.write(string+"\n")
	def write(self, string):
		self.code.append(self.tab * self.level + string)
	def indent(self):
		self.level = self.level + 1
	def dedent(self):
		import sys
		if self.level == 0:
			raise SyntaxError, "internal error in code generator"
		self.level = self.level - 1
		

def gen_invoke(cg, argc):
	arglist = ["self"]
	for x in range(argc):
		arglist.append("arg"+str(x))
	cg.writeln("def invoke" + str(argc)+"(" + ", ".join(arglist) +"):")
	cg.indent()
	cg.writeln("raise Exception('bad arity ' + str(" + str(argc)+"))")
	cg.dedent()

def gen_apply_block(cg, argc, evalstr = ".evaluate()"):
	cg.writeln("if lst.length().int_value() == " + str(argc) + ":")
	cg.indent()
	args = []
	for x in range(argc):
		cg.writeln("arg" + str(x) + " = lst.first()"+evalstr)
		cg.writeln("lst = lst.rest()")
		args.append("arg" + str(x))
	cg.writeln("return self.invoke"+str(argc)+"(" + ",".join(args)+")")
	cg.dedent()

def gen_applies(cg, max_count = 20):
	cg.writeln("def apply(self, lst):")
	cg.indent()
	cg.writeln("if self.is_builtin().bool_value():")
	cg.indent()
	for x in range(max_count):
		gen_apply_block(cg, x, "")
	cg.dedent()
	cg.writeln("else:")
	cg.indent()
	for x in range(max_count):
		gen_apply_block(cg, x)
	cg.dedent()

def gen_afn(max_count = 20):
	cg = CodeGeneratorBackend()
	cg.begin()
	cg.writeln("# This file is autogenerated.")
	cg.writeln("# DO NOT EDIT!!!!!")
	cg.writeln("from clojure.lang.primitives import Obj")
	cg.writeln("class AFn(Obj):")
	cg.indent()
	for x in range(max_count):
		gen_invoke(cg, x)
	gen_applies(cg, max_count)
	cg.dedent()
	f = open("clojure/lang/afn_gen.py", "w")
	res = cg.end()
	f.write(res)
	return res
	
gen_afn()
from clojure.lang.afn_gen import AFn

